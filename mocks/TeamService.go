// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	symbiosis "github.com/symbiosis-cloud/symbiosis-go"
)

// TeamService is an autogenerated mock type for the TeamService type
type TeamService struct {
	mock.Mock
}

// ChangeRole provides a mock function with given fields: email, role
func (_m *TeamService) ChangeRole(email string, role string) error {
	ret := _m.Called(email, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(email, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMember provides a mock function with given fields: email
func (_m *TeamService) DeleteMember(email string) error {
	ret := _m.Called(email)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetInvitationByEmail provides a mock function with given fields: email
func (_m *TeamService) GetInvitationByEmail(email string) (*symbiosis.TeamMember, error) {
	ret := _m.Called(email)

	var r0 *symbiosis.TeamMember
	if rf, ok := ret.Get(0).(func(string) *symbiosis.TeamMember); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*symbiosis.TeamMember)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMemberByEmail provides a mock function with given fields: email
func (_m *TeamService) GetMemberByEmail(email string) (*symbiosis.TeamMember, error) {
	ret := _m.Called(email)

	var r0 *symbiosis.TeamMember
	if rf, ok := ret.Get(0).(func(string) *symbiosis.TeamMember); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*symbiosis.TeamMember)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InviteMembers provides a mock function with given fields: emails, role
func (_m *TeamService) InviteMembers(emails []string, role string) ([]*symbiosis.TeamMember, error) {
	ret := _m.Called(emails, role)

	var r0 []*symbiosis.TeamMember
	if rf, ok := ret.Get(0).(func([]string, string) []*symbiosis.TeamMember); ok {
		r0 = rf(emails, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*symbiosis.TeamMember)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, string) error); ok {
		r1 = rf(emails, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTeamService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTeamService creates a new instance of TeamService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTeamService(t mockConstructorTestingTNewTeamService) *TeamService {
	mock := &TeamService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
