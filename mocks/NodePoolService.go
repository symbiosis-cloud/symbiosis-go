// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	symbiosis "github.com/symbiosis-cloud/symbiosis-go"
)

// NodePoolService is an autogenerated mock type for the NodePoolService type
type NodePoolService struct {
	mock.Mock
}

// Create provides a mock function with given fields: input
func (_m *NodePoolService) Create(input *symbiosis.NodePoolInput) (*symbiosis.NodePool, error) {
	ret := _m.Called(input)

	var r0 *symbiosis.NodePool
	if rf, ok := ret.Get(0).(func(*symbiosis.NodePoolInput) *symbiosis.NodePool); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*symbiosis.NodePool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*symbiosis.NodePoolInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: nodePoolId
func (_m *NodePoolService) Delete(nodePoolId string) error {
	ret := _m.Called(nodePoolId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(nodePoolId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Describe provides a mock function with given fields: id
func (_m *NodePoolService) Describe(id string) (*symbiosis.NodePool, error) {
	ret := _m.Called(id)

	var r0 *symbiosis.NodePool
	if rf, ok := ret.Get(0).(func(string) *symbiosis.NodePool); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*symbiosis.NodePool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: nodePoolId, input
func (_m *NodePoolService) Update(nodePoolId string, input *symbiosis.NodePoolUpdateInput) error {
	ret := _m.Called(nodePoolId, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *symbiosis.NodePoolUpdateInput) error); ok {
		r0 = rf(nodePoolId, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewNodePoolService interface {
	mock.TestingT
	Cleanup(func())
}

// NewNodePoolService creates a new instance of NodePoolService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNodePoolService(t mockConstructorTestingTNewNodePoolService) *NodePoolService {
	mock := &NodePoolService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
