// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	symbiosis "github.com/symbiosis-cloud/symbiosis-go"
)

// NodeService is an autogenerated mock type for the NodeService type
type NodeService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: name
func (_m *NodeService) Delete(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Describe provides a mock function with given fields: name
func (_m *NodeService) Describe(name string) (*symbiosis.Node, error) {
	ret := _m.Called(name)

	var r0 *symbiosis.Node
	if rf, ok := ret.Get(0).(func(string) *symbiosis.Node); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*symbiosis.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Recycle provides a mock function with given fields: name
func (_m *NodeService) Recycle(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewNodeService interface {
	mock.TestingT
	Cleanup(func())
}

// NewNodeService creates a new instance of NodeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNodeService(t mockConstructorTestingTNewNodeService) *NodeService {
	mock := &NodeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
